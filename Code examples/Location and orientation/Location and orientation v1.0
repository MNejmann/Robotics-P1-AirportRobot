#include <Arduino_BuiltIn.h>
#include <Zumo32U4.h>
#include <Wire.h>
#include <math.h>
#include <Zumo32U4.h>
#include "TurnSensor.h"
#include <L3G.h>

Zumo32U4Motors motors;
Zumo32U4Encoders encoders;
Zumo32U4LCD lcd;
L3G gyro;
Zumo32U4Buzzer buzzer;
Zumo32U4ProximitySensors proxSensors;

struct prox{
  const uint8_t sensorThreshold = 20;
  uint16_t BrightnessLevels[8]={0.2,0.4,0.8,1.2,2,4,6,8};
  int object[8] = {0,0,0,0,0,0,0,0};
};
struct prox prox;

void setup(){
  Serial.begin(9600);
  pinMode(0, INPUT);
  pinMode(1, INPUT);
  proxSensors.initThreeSensors();
  proxSensors.setBrightnessLevels(prox.BrightnessLevels, 8);
  encoders.init();
  turnSensorSetup();
  delay(500);
  turnSensorReset();
  //lcd.clear();
  turnSensorUpdate();
  int32_t angle = getAngle();
  findLocation();
  destinationAngle();
  delay(1000);
}

int CLsensor;
int CRsensor;

float deltaL;
float deltaR;
float x = 0; float y = 0;
float totalAngle = 0;
int32_t angle = getAngle();
float xSide;
float ySide;
int PinRead1 = 0;
int PinRead2 = 0;
int gateNumber = 0;

int32_t getAngle(){
  // turnAngle is a variable defined in TurnSensor.cpp
  // This math converts the number into degrees turned since the
  // last sensor reset.
  return ((((int32_t)turnAngle >> 16) * 360) >> 16)*(-1);
}

int destinationX;
int destinationY;
float calcAngle;

float findLocation(){
  //Changing the between CPR = 51.45 or 75.81
  float CPR = 51.45*12;
  //Calculates angles and distances
  deltaL = ((encoders.getCountsAndResetLeft()/CPR)*M_PI*3.9);
  deltaR = ((encoders.getCountsAndResetRight()/CPR)*M_PI*3.9);
  angle = round(getAngle());
  xSide = ((deltaL+deltaR)/2)*sin(fabs(angle)*(M_PI/180));
  ySide = sqrt(pow((deltaL+deltaR)/2,2)-pow(xSide,2));
  //totals x and y coordinates, while knowing weather or not it should be added or subracted
  if(destinationX+-2<x){
    x -= xSide;
  }else{
    x += xSide;
  }
  if(destinationY+-2<y){
    y -= ySide;
  }else{
    y += ySide;
  }
  //Prints the coordinates
  float coordinates[2] = {x,y};
  /*lcd.clear();
  lcd.print("x: "+(String)coordinates[0]);
  lcd.gotoXY(0, 1);
  lcd.print("y: "+(String)coordinates[1]);*/
  return angle;
}

float destinationAngle(){
  //Calculates the angle towards the partial destination
  if(destinationY>y && destinationX<x){
    calcAngle = atan((destinationX-x)/(destinationY-y))*(180/M_PI);
    Serial.println("1");
  }else if(destinationY>y && destinationX>x){
    calcAngle = atan((destinationX-x)/(destinationY-y))*(180/M_PI);
    Serial.println("2");
  }else if(destinationY<y && destinationX<x){
    calcAngle = -(atan(((destinationY-y)/(destinationX-x)))*(180/M_PI))-90;
    Serial.println("3");
  }else if(destinationY<y && destinationX>x){
    calcAngle = fabs(atan(((destinationY-y)/(destinationX-x)))*(180/M_PI))+90;
    Serial.println("4");
  }
  Serial.println((String)calcAngle);
  return calcAngle;
}

void UnoRead(){
  PinRead1 = digitalRead(0);
  PinRead2 = digitalRead(1);
  if (PinRead1 ==1 &&PinRead2 ==0){
    gateNumber = 1;
  }
  else if (PinRead1 ==0 &&PinRead2 ==1){
    gateNumber = 2;
  }
  else if (PinRead1 ==1 &&PinRead2 ==1){
    gateNumber = 3;
  }
  Serial.print("gateNumber:");
  Serial.println(gateNumber);
  delay(100);
}

void goToGate(){
  //Drive until within +-2 of partial destination
  while((destinationX-2>round(x) || round(x)>destinationX+2) || (destinationY-2>round(y) || round(y)>destinationY+2)){
    findLocation();
    delay(50);
    while(angle+-1 != round(calcAngle)){
      //Turn in order to face towards the destination
      findLocation();
      turnSensorUpdate();
      destinationAngle();
      //Dicides which way to turn
      if(calcAngle-angle>250){
        motors.setSpeeds(-100,100);
      }else if(calcAngle>angle){
        motors.setSpeeds(100,-100);        
      }else{
        motors.setSpeeds(-100,100);
      }
    }
    motors.setSpeeds(100,100);
    if(destinationX==34 && destinationY==50 || destinationX == -16 && destinationY == 88 || destinationX == -16 && destinationY == 84){
      detectAndAvoidObject();
    }
  }
  motors.setSpeeds(0,0);  
}

void altRoute1(){
  //First alternative route
  destinationX = -22; destinationY = 18;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = -20; destinationY = 64;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = 4; destinationY = 62;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = 20; destinationY = 44;
      destinationAngle();
      goToGate(); delay(400);
}

void altRoute2(){
  //Second alternative route
  destinationX = 22; destinationY = 16;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = 22; destinationY = 50;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = -6; destinationY = 82;
      destinationAngle();
      goToGate(); delay(400);
}

void altRoute3(){
  //Third alternative route
  destinationX = 22; destinationY = 26;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = 22; destinationY = 54;
      destinationAngle();
      goToGate(); delay(400);
  destinationX = -16; destinationY = 86;
      destinationAngle();
      goToGate(); delay(400);
}


void detectAndAvoidObject(){
  //Detects objects and select the right alternative route
  //Not done yet
  proxSensors.read();
  CLsensor = proxSensors.countsFrontWithLeftLeds();
  CRsensor = proxSensors.countsFrontWithRightLeds();
  Serial.println(CLsensor);
  Serial.println(CRsensor);
  if(CLsensor==8 && CRsensor==8){
    if(gateNumber==1){
      altRoute1();
    }else if(gateNumber==2){
      altRoute2();
    }else if(gateNumber==3){
      altRoute3();
    }
  }
}

bool i = true;

void loop(){
  while(gateNumber == 0){
    UnoRead();
  }
  //Drive to the correct gate
  while(i){
    //Needs to detect with color what gateNumber it needs to go to
    if(gateNumber == 1){
      destinationX = 34; destinationY = 50;
      goToGate(); delay(400);
      destinationX = 54; destinationY = 50;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = 56; destinationY = 16;
      destinationAngle();
      goToGate();
    }
    if(gateNumber == 2){
      destinationX = -16; destinationY = 18;
      goToGate(); delay(400);
      destinationX = -16; destinationY = 88;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = 58; destinationY = 87;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = 56; destinationY = 110;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = 24; destinationY = 110;
      destinationAngle();
      goToGate();
    }
    if(gateNumber == 3){
      destinationX = -16; destinationY = 18;
      goToGate(); delay(400);
      destinationX = -16; destinationY = 84;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = -30; destinationY = 100;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = -52; destinationY = 100;
      destinationAngle();
      goToGate(); delay(400);
      destinationX = -52; destinationY = 50;
      destinationAngle();
      goToGate();
    }
    i = false;
  }
  motors.setSpeeds(0,0);
}
