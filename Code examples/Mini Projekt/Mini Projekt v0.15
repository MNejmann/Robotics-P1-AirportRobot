#include <Wire.h>
#include <Zumo32U4.h>
Zumo32U4LineSensors lineSensors;
Zumo32U4Motors motors;
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4ButtonB buttonB;
Zumo32U4ButtonB buttonC;
Zumo32U4ProximitySensors proxSensors;
#define NUM_SENSORS 5
uint16_t lineSensorValues[NUM_SENSORS];
bool useEmitters = true;
struct LineSensorsWhite{ // True if White, False if Black
  bool L;
  bool LC;
  bool C;
  bool RC;
  bool R;
};

struct prox{
  const uint8_t sensorThreshold = 20;
  uint16_t BrightnessLevels[20] = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
  int object[4] = {0,0,0,0};
  int left_sensor;
  int center_left_sensor;
  int center_right_sensor;
  int right_sensor;
};

struct prox prox;
void readSensors(LineSensorsWhite &state){
// Next line reads the sensor values and store them in the array lineSensorValues
  lineSensors.read(lineSensorValues, useEmitters ? QTR_EMITTERS_ON : QTR_EMITTERS_OFF);
// In the following lines use the values of the sensors to update the struct
}

void move(int lSpeed, int rSpeed, int time){
  motors.setSpeeds(lSpeed, rSpeed);
  delay(time);
}

int thresholdL = 100; // White threshold, white return values lower than this
int thresholdLC = 100;
int thresholdC = 100;
int thresholdRC = 100;
int thresholdR = 100;
LineSensorsWhite sensorsState = {0,0,0,0,0};

void setup() {
  lineSensors.initFiveSensors();
  Serial.begin(9600);
  lcd.clear();
  proxSensors.initThreeSensors();
  proxSensors.setBrightnessLevels(prox.BrightnessLevels, 10);
}



int i=0;

void followLine(){
  if((sensorsState.LC==1 && sensorsState.C==1 && sensorsState.RC==0) || (sensorsState.LC==0 && sensorsState.C==1 && sensorsState.RC==1)){
    motors.setSpeeds(50,50);
  }else if(sensorsState.LC==0 && sensorsState.C==0 && sensorsState.RC==1){
    motors.setSpeeds(100, 50);
  }else if(sensorsState.RC==0 && sensorsState.C==0 && sensorsState.LC==1){
    motors.setSpeeds(50, 100);
  }else if(sensorsState.L==1 && sensorsState.R==1){
    delay(50);
    motors.setSpeeds(0, 0);
    i = 1;
  }
}

int level[5]={0,0,0,0,0};

void calibrateSensors(){
  lcd.clear();
  // Wait 1 second and then begin automatic sensor calibration
  // by rotating in place to sweep the sensors over the line
  delay(1000);
  for(uint16_t i = 0; i < 120; i++)
  {
    if (i > 30 && i <= 90)
    {
      motors.setSpeeds(-200, 200);
    }
    else
    {
      motors.setSpeeds(200, -200);
    }
    lineSensors.calibrate();
    lineSensors.readCalibrated(level);
    Serial.println((String)level[0]+" "+(String)level[1]+" "+(String)level[2]+" "+(String)level[3]+" "+(String)level[4]);
  }
  motors.setSpeeds(0, 0);
}

void checkSensors(){
  readSensors(sensorsState);
  lineSensors.readCalibrated(level);
  if(level[0]<thresholdL) sensorsState.L=true;
  else sensorsState.L=false;
  if(level[1]<thresholdLC) sensorsState.LC=true;
  else sensorsState.LC=false;
  if(level[2]<thresholdC) sensorsState.C=true;
  else sensorsState.C=false;
  if(level[3]<thresholdRC) sensorsState.RC=true;
  else sensorsState.RC=false;
  if(level[4]<thresholdR) sensorsState.R=true;
  else sensorsState.R=false;
  Serial.println((String)level[0]+" "+(String)level[1]+" "+(String)level[2]+" "+(String)level[3]+" "+(String)level[4]);
}

void findLine(){
  bool k = true;
  while(k){
    motors.setSpeeds(100, 100);
    checkSensors();
    if(sensorsState.R==1 && sensorsState.L==1 && sensorsState.LC==1 && sensorsState.C==1 && sensorsState.RC==1){
      delay(400); move(100,-100,800);
      k = false;
    }
  }
}

void distLong(){
  lineSensors.emittersOff();
  bool i = true;
  while(i){
    motors.setSpeeds(100,100);
    if(sensorsState.C==1){
      move(-100,-100,500);
      i = false;
    }
    followLine();
  }
  

}

void distShort(){
  lineSensors.emittersOff();
  move(100,-100,750);
  move(100,100,2000);
  move(-100,100,750);
  move(100,100,500);
  move(-100,100,750);
  motors.setSpeeds(100,100);
  while(i){
    if(sensorsState.C==1){
      motors.setSpeeds(-75,-150);
    }
  }
  delay(500);
  motors.setSpeeds(-100,-100);
  delay(200);
  followLine();

}

int CLsensor;
int CRsensor;

void detectCan(){
  proxSensors.read();
  lineSensors.emittersOn();
  delay(50);
  CLsensor = proxSensors.countsFrontWithLeftLeds();
  CRsensor = proxSensors.countsFrontWithRightLeds();
  lcd.gotoXY(0,0);
  lcd.print(CLsensor);

  lcd.gotoXY(0,1);
  lcd.print(CRsensor);
}

void distToCan(){
  if(CLsensor==10 && CRsensor==10){
    distShort();
  }else if(CLsensor==9 && CRsensor==9){
    distLong();
  }
}

void loop() {
  if(buttonA.getSingleDebouncedPress()==1){
    findLine();
    while(i != 1){
      checkSensors();
      followLine();
      //Serial.println((String)lineSensorValues[0]+" "+(String)lineSensorValues[1]+" "+(String)lineSensorValues[2]+" "+(String)lineSensorValues[3]+" "+(String)lineSensorValues[4]);
      Serial.println((String)level[0]+" "+(String)level[1]+" "+(String)level[2]+" "+(String)level[3]+" "+(String)level[4]);
    }
    while(true){
      detectCan();
      distToCan();
    }
  }else if(buttonB.getSingleDebouncedPress()==1){
    calibrateSensors();
  }
 
}
  //Serial.println((String)sensorsState.L+" "+(String)sensorsState.LC+" "+(String)sensorsState.C+" "+(String)sensorsState.RC+" "+(String)sensorsState.R);
  //Serial.println(lineSensorValues[0]);
